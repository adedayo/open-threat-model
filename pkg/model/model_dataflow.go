/*
Open Threat Model Specification

A Schema Definition for Open Threat Model https://github.com/iriusrisk/OpenThreatModel\"

API version: 0.1.0
Contact: info@cysoh.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package otm

import (
	"encoding/json"
)

// checks if the Dataflow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dataflow{}

// Dataflow struct for Dataflow
type Dataflow struct {
	Id string `json:"id" yaml:"id"`
	Name string `json:"name" yaml:"name"`
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty"`
	Bidirectional *bool `json:"bidirectional,omitempty" yaml:"bidirectional,omitempty"`
	Source string `json:"source" yaml:"source"`
	Destination string `json:"destination" yaml:"destination"`
	Assets []string `json:"assets,omitempty" yaml:"assets,omitempty"`
	Threats []ThreatInstance `json:"threats,omitempty" yaml:"threats,omitempty"`
	Attributes *map[string]string `json:"attributes,omitempty" yaml:"attributes,omitempty"`
}

// NewDataflow instantiates a new Dataflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataflow(id string, name string, source string, destination string) *Dataflow {
	this := Dataflow{}
	this.Id = id
	this.Name = name
	this.Source = source
	this.Destination = destination
	return &this
}

// NewDataflowWithDefaults instantiates a new Dataflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataflowWithDefaults() *Dataflow {
	this := Dataflow{}
	return &this
}

// GetId returns the Id field value
func (o *Dataflow) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Dataflow) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Dataflow) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Dataflow) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Dataflow) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Dataflow) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Dataflow) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataflow) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Dataflow) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Dataflow) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Dataflow) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataflow) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Dataflow) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Dataflow) SetTags(v []string) {
	o.Tags = v
}

// GetBidirectional returns the Bidirectional field value if set, zero value otherwise.
func (o *Dataflow) GetBidirectional() bool {
	if o == nil || IsNil(o.Bidirectional) {
		var ret bool
		return ret
	}
	return *o.Bidirectional
}

// GetBidirectionalOk returns a tuple with the Bidirectional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataflow) GetBidirectionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Bidirectional) {
		return nil, false
	}
	return o.Bidirectional, true
}

// HasBidirectional returns a boolean if a field has been set.
func (o *Dataflow) HasBidirectional() bool {
	if o != nil && !IsNil(o.Bidirectional) {
		return true
	}

	return false
}

// SetBidirectional gets a reference to the given bool and assigns it to the Bidirectional field.
func (o *Dataflow) SetBidirectional(v bool) {
	o.Bidirectional = &v
}

// GetSource returns the Source field value
func (o *Dataflow) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Dataflow) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Dataflow) SetSource(v string) {
	o.Source = v
}

// GetDestination returns the Destination field value
func (o *Dataflow) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *Dataflow) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *Dataflow) SetDestination(v string) {
	o.Destination = v
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *Dataflow) GetAssets() []string {
	if o == nil || IsNil(o.Assets) {
		var ret []string
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataflow) GetAssetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *Dataflow) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []string and assigns it to the Assets field.
func (o *Dataflow) SetAssets(v []string) {
	o.Assets = v
}

// GetThreats returns the Threats field value if set, zero value otherwise.
func (o *Dataflow) GetThreats() []ThreatInstance {
	if o == nil || IsNil(o.Threats) {
		var ret []ThreatInstance
		return ret
	}
	return o.Threats
}

// GetThreatsOk returns a tuple with the Threats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataflow) GetThreatsOk() ([]ThreatInstance, bool) {
	if o == nil || IsNil(o.Threats) {
		return nil, false
	}
	return o.Threats, true
}

// HasThreats returns a boolean if a field has been set.
func (o *Dataflow) HasThreats() bool {
	if o != nil && !IsNil(o.Threats) {
		return true
	}

	return false
}

// SetThreats gets a reference to the given []ThreatInstance and assigns it to the Threats field.
func (o *Dataflow) SetThreats(v []ThreatInstance) {
	o.Threats = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Dataflow) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataflow) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Dataflow) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *Dataflow) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o Dataflow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dataflow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Bidirectional) {
		toSerialize["bidirectional"] = o.Bidirectional
	}
	toSerialize["source"] = o.Source
	toSerialize["destination"] = o.Destination
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Threats) {
		toSerialize["threats"] = o.Threats
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableDataflow struct {
	value *Dataflow
	isSet bool
}

func (v NullableDataflow) Get() *Dataflow {
	return v.value
}

func (v *NullableDataflow) Set(val *Dataflow) {
	v.value = val
	v.isSet = true
}

func (v NullableDataflow) IsSet() bool {
	return v.isSet
}

func (v *NullableDataflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataflow(val *Dataflow) *NullableDataflow {
	return &NullableDataflow{value: val, isSet: true}
}

func (v NullableDataflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


