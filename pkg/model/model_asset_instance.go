/*
Open Threat Model Specification

A Schema Definition for Open Threat Model https://github.com/iriusrisk/OpenThreatModel\"

API version: 0.1.0
Contact: info@cysoh.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package otm

import (
	"encoding/json"
)

// checks if the AssetInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetInstance{}

// AssetInstance struct for AssetInstance
type AssetInstance struct {
	Processed []string `json:"processed,omitempty" yaml:"processed,omitempty"`
	Stored []string `json:"stored,omitempty" yaml:"stored,omitempty"`
}

// NewAssetInstance instantiates a new AssetInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetInstance() *AssetInstance {
	this := AssetInstance{}
	return &this
}

// NewAssetInstanceWithDefaults instantiates a new AssetInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetInstanceWithDefaults() *AssetInstance {
	this := AssetInstance{}
	return &this
}

// GetProcessed returns the Processed field value if set, zero value otherwise.
func (o *AssetInstance) GetProcessed() []string {
	if o == nil || IsNil(o.Processed) {
		var ret []string
		return ret
	}
	return o.Processed
}

// GetProcessedOk returns a tuple with the Processed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInstance) GetProcessedOk() ([]string, bool) {
	if o == nil || IsNil(o.Processed) {
		return nil, false
	}
	return o.Processed, true
}

// HasProcessed returns a boolean if a field has been set.
func (o *AssetInstance) HasProcessed() bool {
	if o != nil && !IsNil(o.Processed) {
		return true
	}

	return false
}

// SetProcessed gets a reference to the given []string and assigns it to the Processed field.
func (o *AssetInstance) SetProcessed(v []string) {
	o.Processed = v
}

// GetStored returns the Stored field value if set, zero value otherwise.
func (o *AssetInstance) GetStored() []string {
	if o == nil || IsNil(o.Stored) {
		var ret []string
		return ret
	}
	return o.Stored
}

// GetStoredOk returns a tuple with the Stored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInstance) GetStoredOk() ([]string, bool) {
	if o == nil || IsNil(o.Stored) {
		return nil, false
	}
	return o.Stored, true
}

// HasStored returns a boolean if a field has been set.
func (o *AssetInstance) HasStored() bool {
	if o != nil && !IsNil(o.Stored) {
		return true
	}

	return false
}

// SetStored gets a reference to the given []string and assigns it to the Stored field.
func (o *AssetInstance) SetStored(v []string) {
	o.Stored = v
}

func (o AssetInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Processed) {
		toSerialize["processed"] = o.Processed
	}
	if !IsNil(o.Stored) {
		toSerialize["stored"] = o.Stored
	}
	return toSerialize, nil
}

type NullableAssetInstance struct {
	value *AssetInstance
	isSet bool
}

func (v NullableAssetInstance) Get() *AssetInstance {
	return v.value
}

func (v *NullableAssetInstance) Set(val *AssetInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetInstance(val *AssetInstance) *NullableAssetInstance {
	return &NullableAssetInstance{value: val, isSet: true}
}

func (v NullableAssetInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


