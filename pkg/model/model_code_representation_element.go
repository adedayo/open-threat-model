/*
Open Threat Model Specification

A Schema Definition for Open Threat Model https://github.com/iriusrisk/OpenThreatModel\"

API version: 0.1.0
Contact: info@cysoh.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package otm

import (
	"encoding/json"
)

// checks if the CodeRepresentationElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeRepresentationElement{}

// CodeRepresentationElement struct for CodeRepresentationElement
type CodeRepresentationElement struct {
	Representation string `json:"representation" yaml:"representation"`
	Id string `json:"id" yaml:"id"`
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
	File *string `json:"file,omitempty" yaml:"file,omitempty"`
	Line *int `json:"line,omitempty" yaml:"line,omitempty"`
	CodeSnippet *string `json:"codeSnippet,omitempty" yaml:"codeSnippet,omitempty"`
	Attributes *map[string]string `json:"attributes,omitempty" yaml:"attributes,omitempty"`
}

// NewCodeRepresentationElement instantiates a new CodeRepresentationElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeRepresentationElement(representation string, id string) *CodeRepresentationElement {
	this := CodeRepresentationElement{}
	this.Representation = representation
	this.Id = id
	return &this
}

// NewCodeRepresentationElementWithDefaults instantiates a new CodeRepresentationElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeRepresentationElementWithDefaults() *CodeRepresentationElement {
	this := CodeRepresentationElement{}
	return &this
}

// GetRepresentation returns the Representation field value
func (o *CodeRepresentationElement) GetRepresentation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Representation
}

// GetRepresentationOk returns a tuple with the Representation field value
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetRepresentationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Representation, true
}

// SetRepresentation sets field value
func (o *CodeRepresentationElement) SetRepresentation(v string) {
	o.Representation = v
}

// GetId returns the Id field value
func (o *CodeRepresentationElement) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CodeRepresentationElement) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CodeRepresentationElement) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CodeRepresentationElement) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CodeRepresentationElement) SetName(v string) {
	o.Name = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *CodeRepresentationElement) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *CodeRepresentationElement) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *CodeRepresentationElement) SetFile(v string) {
	o.File = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *CodeRepresentationElement) GetLine() int {
	if o == nil || IsNil(o.Line) {
		var ret int
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetLineOk() (*int, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *CodeRepresentationElement) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int and assigns it to the Line field.
func (o *CodeRepresentationElement) SetLine(v int) {
	o.Line = &v
}

// GetCodeSnippet returns the CodeSnippet field value if set, zero value otherwise.
func (o *CodeRepresentationElement) GetCodeSnippet() string {
	if o == nil || IsNil(o.CodeSnippet) {
		var ret string
		return ret
	}
	return *o.CodeSnippet
}

// GetCodeSnippetOk returns a tuple with the CodeSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetCodeSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.CodeSnippet) {
		return nil, false
	}
	return o.CodeSnippet, true
}

// HasCodeSnippet returns a boolean if a field has been set.
func (o *CodeRepresentationElement) HasCodeSnippet() bool {
	if o != nil && !IsNil(o.CodeSnippet) {
		return true
	}

	return false
}

// SetCodeSnippet gets a reference to the given string and assigns it to the CodeSnippet field.
func (o *CodeRepresentationElement) SetCodeSnippet(v string) {
	o.CodeSnippet = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CodeRepresentationElement) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeRepresentationElement) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CodeRepresentationElement) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *CodeRepresentationElement) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

func (o CodeRepresentationElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeRepresentationElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["representation"] = o.Representation
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.CodeSnippet) {
		toSerialize["codeSnippet"] = o.CodeSnippet
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableCodeRepresentationElement struct {
	value *CodeRepresentationElement
	isSet bool
}

func (v NullableCodeRepresentationElement) Get() *CodeRepresentationElement {
	return v.value
}

func (v *NullableCodeRepresentationElement) Set(val *CodeRepresentationElement) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeRepresentationElement) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeRepresentationElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeRepresentationElement(val *CodeRepresentationElement) *NullableCodeRepresentationElement {
	return &NullableCodeRepresentationElement{value: val, isSet: true}
}

func (v NullableCodeRepresentationElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeRepresentationElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


