/*
Open Threat Model Specification

A Schema Definition for Open Threat Model https://github.com/iriusrisk/OpenThreatModel\"

API version: 0.1.0
Contact: info@cysoh.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package otm

import (
	"encoding/json"
)

// checks if the Diagram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Diagram{}

// Diagram struct for Diagram
type Diagram struct {
	Representation
	Size Size `json:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"json:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size" yaml:"size""`
}

// NewDiagram instantiates a new Diagram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagram(size Size, name string, id string, type_ string) *Diagram {
	this := Diagram{}
	this.Name = name
	this.Id = id
	this.Type = type_
	this.Size = size
	return &this
}

// NewDiagramWithDefaults instantiates a new Diagram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagramWithDefaults() *Diagram {
	this := Diagram{}
	return &this
}

// GetSize returns the Size field value
func (o *Diagram) GetSize() Size {
	if o == nil {
		var ret Size
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Diagram) GetSizeOk() (*Size, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Diagram) SetSize(v Size) {
	o.Size = v
}

func (o Diagram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Diagram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedRepresentation, errRepresentation := json.Marshal(o.Representation)
	if errRepresentation != nil {
		return map[string]interface{}{}, errRepresentation
	}
	errRepresentation = json.Unmarshal([]byte(serializedRepresentation), &toSerialize)
	if errRepresentation != nil {
		return map[string]interface{}{}, errRepresentation
	}
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

type NullableDiagram struct {
	value *Diagram
	isSet bool
}

func (v NullableDiagram) Get() *Diagram {
	return v.value
}

func (v *NullableDiagram) Set(val *Diagram) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagram) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagram(val *Diagram) *NullableDiagram {
	return &NullableDiagram{value: val, isSet: true}
}

func (v NullableDiagram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


