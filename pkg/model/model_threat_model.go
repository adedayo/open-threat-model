/*
Open Threat Model Specification

A Schema Definition for Open Threat Model https://github.com/iriusrisk/OpenThreatModel\"

API version: 0.1.0
Contact: info@cysoh.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package otm

import (
	"encoding/json"
)

// checks if the ThreatModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreatModel{}

// ThreatModel struct for ThreatModel
type ThreatModel struct {
	Representation
}

// NewThreatModel instantiates a new ThreatModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreatModel(name string, id string, type_ string) *ThreatModel {
	this := ThreatModel{}
	this.Name = name
	this.Id = id
	this.Type = type_
	return &this
}

// NewThreatModelWithDefaults instantiates a new ThreatModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreatModelWithDefaults() *ThreatModel {
	this := ThreatModel{}
	return &this
}

func (o ThreatModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreatModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedRepresentation, errRepresentation := json.Marshal(o.Representation)
	if errRepresentation != nil {
		return map[string]interface{}{}, errRepresentation
	}
	errRepresentation = json.Unmarshal([]byte(serializedRepresentation), &toSerialize)
	if errRepresentation != nil {
		return map[string]interface{}{}, errRepresentation
	}
	return toSerialize, nil
}

type NullableThreatModel struct {
	value *ThreatModel
	isSet bool
}

func (v NullableThreatModel) Get() *ThreatModel {
	return v.value
}

func (v *NullableThreatModel) Set(val *ThreatModel) {
	v.value = val
	v.isSet = true
}

func (v NullableThreatModel) IsSet() bool {
	return v.isSet
}

func (v *NullableThreatModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreatModel(val *ThreatModel) *NullableThreatModel {
	return &NullableThreatModel{value: val, isSet: true}
}

func (v NullableThreatModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreatModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


